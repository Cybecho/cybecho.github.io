name: Hugo with Direct Notion API

on:
  push:
    branches: ["main"]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      # 🔧 수정된 Notion 동기화 스크립트 (YAML 안전성 강화)
      - name: Enhanced Notion Sync Script
        run: |
          echo "🚀 Creating enhanced Notion sync script..."
          cat > sync_notion.js << 'EOF'
          const { Client } = require('@notionhq/client');
          const fs = require('fs');
          const path = require('path');
          
          const notion = new Client({
            auth: process.env.NOTION_SECRET,
          });
          
          // YAML 안전 문자열 생성 함수 (핵심 수정!)
          function createSafeYamlString(str) {
            if (!str) return '""';
            
            // 문자열에서 따옴표와 특수문자 이스케이프
            const escaped = str
              .replace(/\\/g, '\\\\')  // 백슬래시 이스케이프
              .replace(/"/g, '\\"')    // 따옴표 이스케이프
              .replace(/\n/g, '\\n')   // 줄바꿈 이스케이프
              .replace(/\r/g, '\\r')   // 캐리지 리턴 이스케이프
              .replace(/\t/g, '\\t');  // 탭 이스케이프
              
            return `"${escaped}"`;
          }
          
          // 날짜 포맷팅 함수
          function formatDate(dateString) {
            if (!dateString) return new Date().toISOString();
            const date = new Date(dateString);
            return date.toISOString();
          }
          
          // 안전한 슬러그 생성 함수
          function createSlug(title) {
            return title
              .toLowerCase()
              .replace(/[^a-z0-9가-힣\s]/g, '') // 한글, 영문, 숫자, 공백만 허용
              .replace(/\s+/g, '-') // 공백을 대시로
              .replace(/-+/g, '-') // 연속 대시를 하나로
              .replace(/^-|-$/g, '') // 시작/끝 대시 제거
              .substring(0, 100); // 길이 제한
          }
          
          // 리치 텍스트 변환 함수
          function convertRichText(richTextArray) {
            if (!richTextArray || !Array.isArray(richTextArray)) return '';
            
            return richTextArray.map(textObj => {
              let text = textObj.plain_text || '';
              
              if (textObj.annotations?.bold) text = `**${text}**`;
              if (textObj.annotations?.italic) text = `*${text}*`;
              if (textObj.annotations?.code) text = `\`${text}\``;
              if (textObj.href) text = `[${text}](${textObj.href})`;
              
              return text;
            }).join('');
          }
          
          // 블록 변환 함수
          async function convertBlocks(pageId) {
            try {
              const blocks = await notion.blocks.children.list({
                block_id: pageId,
                page_size: 100
              });
              
              let content = '';
              
              for (const block of blocks.results) {
                switch (block.type) {
                  case 'paragraph':
                    if (block.paragraph?.rich_text?.length > 0) {
                      content += convertRichText(block.paragraph.rich_text) + '\n\n';
                    }
                    break;
                    
                  case 'heading_1':
                    if (block.heading_1?.rich_text?.length > 0) {
                      content += '# ' + convertRichText(block.heading_1.rich_text) + '\n\n';
                    }
                    break;
                    
                  case 'heading_2':
                    if (block.heading_2?.rich_text?.length > 0) {
                      content += '## ' + convertRichText(block.heading_2.rich_text) + '\n\n';
                    }
                    break;
                    
                  case 'heading_3':
                    if (block.heading_3?.rich_text?.length > 0) {
                      content += '### ' + convertRichText(block.heading_3.rich_text) + '\n\n';
                    }
                    break;
                    
                  case 'bulleted_list_item':
                    if (block.bulleted_list_item?.rich_text?.length > 0) {
                      content += '- ' + convertRichText(block.bulleted_list_item.rich_text) + '\n';
                    }
                    break;
                    
                  case 'numbered_list_item':
                    if (block.numbered_list_item?.rich_text?.length > 0) {
                      content += '1. ' + convertRichText(block.numbered_list_item.rich_text) + '\n';
                    }
                    break;
                    
                  case 'code':
                    if (block.code?.rich_text?.length > 0) {
                      const language = block.code.language || '';
                      const codeText = convertRichText(block.code.rich_text);
                      content += `\`\`\`${language}\n${codeText}\n\`\`\`\n\n`;
                    }
                    break;
                    
                  case 'quote':
                    if (block.quote?.rich_text?.length > 0) {
                      content += '> ' + convertRichText(block.quote.rich_text) + '\n\n';
                    }
                    break;
                    
                  case 'callout':
                    if (block.callout?.rich_text?.length > 0) {
                      content += '📝 **' + convertRichText(block.callout.rich_text) + '**\n\n';
                    }
                    break;
                    
                  case 'divider':
                    content += '---\n\n';
                    break;
                    
                  case 'image':
                    if (block.image?.file?.url) {
                      content += `![Image](${block.image.file.url})\n\n`;
                    }
                    break;
                }
              }
              
              return content;
            } catch (error) {
              console.error(`❌ Error converting blocks: ${error.message}`);
              return '';
            }
          }
          
          async function syncNotionDatabase() {
            try {
              console.log('🔄 Connecting to Notion...');
              
              const response = await notion.databases.query({
                database_id: process.env.DATABASE_ID,
                filter: {
                  property: 'Status',
                  select: {
                    equals: 'Published'
                  }
                },
                sorts: [
                  {
                    property: 'Date',
                    direction: 'descending'
                  }
                ],
                page_size: 50
              });
          
              console.log(`📊 Found ${response.results.length} published posts`);
          
              if (!fs.existsSync('content/posts')) {
                fs.mkdirSync('content/posts', { recursive: true });
              }
          
              let successCount = 0;
              let errorCount = 0;
          
              for (const page of response.results) {
                try {
                  // 🔧 한글 속성명 사용
                  const title = page.properties['제목']?.title?.[0]?.plain_text || 'Untitled';
                  const dateValue = page.properties['Date']?.date?.start || page.created_time;
                  const tags = page.properties['Tags']?.multi_select?.map(tag => tag.name) || [];
                  const themes = page.properties['Thems']?.multi_select?.map(theme => theme.name) || [];
                  const aiSummary = page.properties['AI 요약']?.rich_text?.[0]?.plain_text || '';
                  
                  const slug = createSlug(title);
                  
                  console.log(`📝 Processing: "${title}"`);
                  
                  // 블록 콘텐츠 가져오기
                  const blockContent = await convertBlocks(page.id);
                  
                  // 🔧 YAML 안전성을 위한 안전한 front matter 생성
                  let content = '---\n';
                  content += `title: ${createSafeYamlString(title)}\n`;
                  content += `date: ${formatDate(dateValue)}\n`;
                  content += `draft: false\n`;
                  
                  // 태그 처리 (안전한 방식)
                  if (tags.length > 0 || themes.length > 0) {
                    const allTags = [...tags, ...themes].map(tag => createSafeYamlString(tag));
                    content += `tags: [${allTags.join(', ')}]\n`;
                  }
                  
                  // 카테고리 처리
                  if (themes.length > 0) {
                    const categories = themes.map(theme => createSafeYamlString(theme));
                    content += `categories: [${categories.join(', ')}]\n`;
                  }
                  
                  // 설명 추가
                  if (aiSummary) {
                    content += `description: ${createSafeYamlString(aiSummary)}\n`;
                  }
                  
                  content += `notion_id: ${createSafeYamlString(page.id)}\n`;
                  content += `notion_url: ${createSafeYamlString(page.url)}\n`;
                  content += '---\n\n';
                  
                  // 콘텐츠 추가
                  if (blockContent.trim()) {
                    content += blockContent;
                  } else {
                    content += `# ${title}\n\n*이 글은 Notion에서 가져왔습니다.*\n\n`;
                    content += `[원본 보기](${page.url})\n`;
                  }
                  
                  // 파일 저장
                  const postDir = `content/posts/${slug}`;
                  if (!fs.existsSync(postDir)) {
                    fs.mkdirSync(postDir, { recursive: true });
                  }
                  
                  fs.writeFileSync(`${postDir}/index.md`, content, 'utf8');
                  
                  console.log(`✅ Created: "${title}" → ${slug}`);
                  successCount++;
                  
                  // API 호출 제한을 위한 지연
                  await new Promise(resolve => setTimeout(resolve, 100));
                  
                } catch (err) {
                  console.error(`❌ Error processing page: ${err.message}`);
                  errorCount++;
                }
              }
              
              console.log(`\n📊 동기화 완료:`);
              console.log(`✅ 성공: ${successCount}개`);
              console.log(`❌ 실패: ${errorCount}개`);
              
            } catch (error) {
              console.error('❌ Notion API Error:', error.message);
              process.exit(0);
            }
          }
          
          syncNotionDatabase();
          EOF

          # Node.js 프로젝트 초기화 및 패키지 설치
          npm init -y
          npm install @notionhq/client

          # 스크립트 실행
          NOTION_SECRET="${{ secrets.NOTION_SECRET }}" DATABASE_ID="${{ secrets.DATABASE_ID }}" node sync_notion.js

      - name: Check Sync Results
        run: |
          echo "📊 동기화 결과:"
          echo "=== 생성된 포스트 ==="
          find content/posts -name "*.md" -type f | wc -l
          echo "개의 포스트가 생성되었습니다."
          
          echo "=== 포스트 목록 ==="
          find content/posts -name "index.md" -type f | head -5
          
          echo "=== YAML 검증 ==="
          for file in $(find content/posts -name "index.md" -type f | head -3); do
            echo "🔍 검사 중: $file"
            # YAML front matter 추출 및 검증
            sed -n '1,/^---$/p' "$file" | head -15
            echo "---"
          done

      - name: Ensure Default Content
        run: |
          # About 페이지
          if [ ! -f content/about.md ]; then
            mkdir -p content
            cat > content/about.md << 'EOF'
          ---
          title: "소개"
          date: 2024-01-01T00:00:00+09:00
          draft: false
          ---
          
          # 안녕하세요, Cybecho입니다! 👋
          
          개발자로서의 삽질과 성장을 기록하는 공간입니다.
          
          ## Notion 연동 상태
          
          - **데이터베이스**: [삽질 저장소](https://notion.so/${{ secrets.DATABASE_ID }})  
          - **자동 동기화**: 매일 새벽 2시 (KST)
          - **수동 동기화**: GitHub Actions에서 "Run workflow"
          
          ## 연락처
          - **GitHub**: [@Cybecho](https://github.com/Cybecho)
          
          ---
          *Notion API를 통해 Published 상태의 글들이 자동 동기화됩니다* ✨
          EOF
          fi

      # Hugo 빌드
      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
        run: |
          echo "🏗️ Building Hugo site..."
          hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
