name: Hugo with Direct Notion API

on:
  push:
    branches: ["main"]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      # 🔧 Notion 동기화 - 다른 도구 사용
      - name: Sync with Notion (Alternative)
        run: |
          echo "🔄 Trying alternative Notion sync methods..."
          
          # 방법 1: notion-blog-kit 시도
          npm install -g notion-blog-kit || echo "notion-blog-kit install failed"
          
          # 방법 2: 수동 확인을 위한 curl 테스트
          echo "🧪 Testing Notion API connection..."
          curl -X POST https://api.notion.com/v1/databases/${{ secrets.DATABASE_ID }}/query \
            -H 'Authorization: Bearer ${{ secrets.NOTION_SECRET }}' \
            -H 'Notion-Version: 2022-06-28' \
            -H 'Content-Type: application/json' \
            -d '{"filter":{"property":"Status","select":{"equals":"Published"}},"page_size":5}' \
            > notion_test.json || echo "API call failed"
          
          if [ -f notion_test.json ]; then
            echo "📊 API Response sample:"
            head -20 notion_test.json
          fi

      # 🎯 전문 Notion → Hugo 도구 사용
      - name: Install and Use notion-hugo
        run: |
          echo "🚀 Using notion-hugo tool..."
          
          # Python 기반 도구 시도
          pip install notion-client || echo "notion-client install failed"
          
          # Go 기반 도구 설치 시도
          wget -O notion2hugo https://github.com/younho9/notion2hugo/releases/latest/download/notion2hugo-linux-amd64 || echo "notion2hugo download failed"
          chmod +x notion2hugo || echo "chmod failed"
          
          # 실행 시도
          ./notion2hugo \
            --token="${{ secrets.NOTION_SECRET }}" \
            --database-id="${{ secrets.DATABASE_ID }}" \
            --output-dir="content/posts" \
            --filter-prop="Status" \
            --filter-value="Published" || echo "notion2hugo execution failed"

      # 🔧 대안: JavaScript로 직접 구현
      - name: Custom Notion Sync Script
        run: |
          echo "🛠️ Creating custom sync script..."
          cat > sync_notion.js << 'EOF'
          const { Client } = require('@notionhq/client');
          const fs = require('fs');
          const path = require('path');

          const notion = new Client({
            auth: process.env.NOTION_SECRET,
          });

          async function syncNotionDatabase() {
            try {
              console.log('🔄 Connecting to Notion...');
              
              const response = await notion.databases.query({
                database_id: process.env.DATABASE_ID,
                filter: {
                  property: 'Status',
                  select: {
                    equals: 'Published'
                  }
                },
                page_size: 10
              });

              console.log(`📊 Found ${response.results.length} published posts`);

              if (!fs.existsSync('content/posts')) {
                fs.mkdirSync('content/posts', { recursive: true });
              }

              for (const page of response.results) {
                try {
                  const title = page.properties.Title?.title?.[0]?.plain_text || 'Untitled';
                  const slug = title.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
                  
                  // 페이지 콘텐츠 가져오기
                  const blocks = await notion.blocks.children.list({
                    block_id: page.id,
                  });

                  let content = `---\ntitle: "${title}"\ndate: ${new Date().toISOString()}\ndraft: false\n---\n\n# ${title}\n\n`;
                  
                  // 간단한 블록 변환
                  for (const block of blocks.results) {
                    if (block.type === 'paragraph' && block.paragraph?.rich_text) {
                      const text = block.paragraph.rich_text.map(t => t.plain_text).join('');
                      content += text + '\n\n';
                    } else if (block.type === 'heading_1' && block.heading_1?.rich_text) {
                      const text = block.heading_1.rich_text.map(t => t.plain_text).join('');
                      content += `# ${text}\n\n`;
                    } else if (block.type === 'heading_2' && block.heading_2?.rich_text) {
                      const text = block.heading_2.rich_text.map(t => t.plain_text).join('');
                      content += `## ${text}\n\n`;
                    }
                  }

                  const postDir = `content/posts/${slug}`;
                  if (!fs.existsSync(postDir)) {
                    fs.mkdirSync(postDir, { recursive: true });
                  }
                  
                  fs.writeFileSync(`${postDir}/index.md`, content);
                  console.log(`✅ Created post: ${title}`);
                } catch (err) {
                  console.error(`❌ Error processing page: ${err.message}`);
                }
              }
            } catch (error) {
              console.error('❌ Notion API Error:', error.message);
              process.exit(0); // 실패해도 계속 진행
            }
          }

          syncNotionDatabase();
          EOF

          # 필요한 패키지 설치 및 실행
          npm init -y
          npm install @notionhq/client
          
          # 스크립트 실행
          NOTION_SECRET="${{ secrets.NOTION_SECRET }}" DATABASE_ID="${{ secrets.DATABASE_ID }}" node sync_notion.js

      # 동기화 결과 확인
      - name: Check Sync Results
        run: |
          echo "📊 Sync Results:"
          echo "=== Posts directory ==="
          find content/posts -name "*.md" -type f | wc -l
          echo "total posts"
          
          echo "=== Sample posts ==="
          find content/posts -name "*.md" -type f | head -3
          
          echo "=== Content preview ==="
          for file in $(find content/posts -name "*.md" -type f | head -2); do
            echo "📄 File: $file"
            head -10 "$file"
            echo "---"
          done

      # 기본 콘텐츠 생성
      - name: Ensure Default Content
        run: |
          # About 페이지
          if [ ! -f content/about.md ]; then
            mkdir -p content
            cat > content/about.md << 'EOF'
          ---
          title: "소개"
          date: 2024-01-01T00:00:00+09:00
          draft: false
          ---

          # 안녕하세요, Cybecho입니다! 👋

          개발자로서의 삽질과 성장을 기록하는 공간입니다.

          ## Notion 연동 상태

          - **데이터베이스**: [삽질 저장소](https://notion.so/${{ secrets.DATABASE_ID }})  
          - **자동 동기화**: 매일 새벽 2시
          - **수동 동기화**: GitHub Actions에서 "Run workflow"

          ## 연락처
          - **GitHub**: [@Cybecho](https://github.com/Cybecho)

          ---
          *Notion API를 통해 Published 상태의 글들이 자동 동기화됩니다* ✨
          EOF
          fi

          # 동기화 상태 포스트
          mkdir -p content/posts/sync-status
          cat > content/posts/sync-status/index.md << 'EOF'
          ---
          title: "🔄 Notion 동기화 상태"
          date: 2024-01-20T10:00:00+09:00
          draft: false
          tags: ["Notion", "동기화", "상태"]
          categories: ["기술"]
          ---

          # Notion 동기화 상태 리포트

          **마지막 동기화**: $(date '+%Y-%m-%d %H:%M:%S')

          ## 설정 정보
          - **Database ID**: `${{ secrets.DATABASE_ID }}`
          - **필터**: Status = "Published"
          - **동기화 방식**: 직접 Notion API 호출

          ## 동기화된 글 수
          $(find content/posts -name "*.md" -type f | wc -l) 개의 포스트

          ## 문제 해결
          만약 Notion 글이 동기화되지 않는다면:
          1. Notion에서 Status를 "Published"로 설정했는지 확인
          2. Integration이 데이터베이스에 연결되어 있는지 확인
          3. GitHub Actions 로그에서 에러 메시지 확인

          **다음 자동 동기화**: 매일 새벽 2시 (KST)
          EOF

      # Hugo 빌드
      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
        run: |
          echo "🏗️ Building Hugo site..."
          hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
