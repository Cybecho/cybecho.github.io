name: Hugo with Direct Notion API

on:
  push:
    branches: ["main"]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      # 🚀 스마트 캐싱이 적용된 Notion 동기화 스크립트
      # 스마트 캐시 초기화 + Notion 동기화
      - name: Smart Cache Reset and Notion Sync
        run: |
          echo "🚀 Creating smart cached Notion sync script..."
          
          # 일주일에 한 번 캐시 초기화 (선택사항)
          if [ "$(date +%u)" = "7" ]; then
            echo "🗑️ Weekly cache reset..."
            rm -f notion_cache.json
          fi
          
          cat > sync_notion.js << 'EOF'
          const { Client } = require('@notionhq/client');
          const fs = require('fs');
          const path = require('path');

          const notion = new Client({
            auth: process.env.NOTION_SECRET,
          });

          // 캐시 파일 경로
          const CACHE_FILE = 'notion_cache.json';

          // 캐시 로드 함수
          function loadCache() {
            try {
              if (fs.existsSync(CACHE_FILE)) {
                const cacheData = fs.readFileSync(CACHE_FILE, 'utf8');
                return JSON.parse(cacheData);
              }
            } catch (error) {
              console.log('Cache load error:', error.message);
            }
            return {};
          }

          // 캐시 저장 함수
          function saveCache(cache) {
            try {
              fs.writeFileSync(CACHE_FILE, JSON.stringify(cache, null, 2));
              console.log('Cache saved successfully');
            } catch (error) {
              console.error('Cache save error:', error.message);
            }
          }

          // YAML 안전 문자열 생성 함수
          function createSafeYamlString(str) {
            if (!str) return '""';
            const escaped = str
              .replace(/\\\\/g, '\\\\\\\\')
              .replace(/"/g, '\\\\"')
              .replace(/\\n/g, '\\\\n')
              .replace(/\\r/g, '\\\\r')
              .replace(/\\t/g, '\\\\t');
            return `"${escaped}"`;
          }

          // 날짜 포맷팅 함수
          function formatDate(dateString) {
            if (!dateString) return new Date().toISOString();
            const date = new Date(dateString);
            return date.toISOString();
          }

          // 안전한 슬러그 생성 함수
          function createSlug(title) {
            return title
              .toLowerCase()
              .replace(/[^a-z0-9가-힣\\s]/g, '')
              .replace(/\\s+/g, '-')
              .replace(/-+/g, '-')
              .replace(/^-|-$/g, '')
              .substring(0, 100);
          }

          // 리치 텍스트 변환 함수
          function convertRichText(richTextArray) {
            if (!richTextArray || !Array.isArray(richTextArray)) return '';
            return richTextArray.map(textObj => {
              let text = textObj.plain_text || '';
              if (textObj.annotations?.bold) text = `**${text}**`;
              if (textObj.annotations?.italic) text = `*${text}*`;
              if (textObj.annotations?.code) text = '`' + text + '`';
              if (textObj.annotations?.strikethrough) text = `~~${text}~~`;
              if (textObj.annotations?.underline) text = `<u>${text}</u>`;
              if (textObj.href) text = `[${text}](${textObj.href})`;
              return text;
            }).join('');
          }

          // 블록 변환 함수 (기존과 동일하지만 짧게)
          async function convertBlocks(pageId) {
            try {
              const blocks = await notion.blocks.children.list({
                block_id: pageId,
                page_size: 100
              });

              let content = '';
              for (const block of blocks.results) {
                switch (block.type) {
                  case 'paragraph':
                    if (block.paragraph?.rich_text?.length > 0) {
                      content += convertRichText(block.paragraph.rich_text) + '\\n\\n';
                    }
                    break;
                  case 'heading_1':
                    if (block.heading_1?.rich_text?.length > 0) {
                      content += '# ' + convertRichText(block.heading_1.rich_text) + '\\n\\n';
                    }
                    break;
                  case 'heading_2':
                    if (block.heading_2?.rich_text?.length > 0) {
                      content += '## ' + convertRichText(block.heading_2.rich_text) + '\\n\\n';
                    }
                    break;
                  case 'heading_3':
                    if (block.heading_3?.rich_text?.length > 0) {
                      content += '### ' + convertRichText(block.heading_3.rich_text) + '\\n\\n';
                    }
                    break;
                  case 'bulleted_list_item':
                    if (block.bulleted_list_item?.rich_text?.length > 0) {
                      content += '- ' + convertRichText(block.bulleted_list_item.rich_text) + '\\n';
                    }
                    break;
                  case 'code':
                    if (block.code?.rich_text?.length > 0) {
                      const language = block.code.language || '';
                      const codeText = convertRichText(block.code.rich_text);
                      content += '```' + language + '\\n' + codeText + '\\n```\\n\\n';
                    }
                    break;
                  case 'quote':
                    if (block.quote?.rich_text?.length > 0) {
                      content += '> ' + convertRichText(block.quote.rich_text) + '\\n\\n';
                    }
                    break;
                  case 'image':
                    if (block.image?.file?.url) {
                      content += '![Image](' + block.image.file.url + ')\\n\\n';
                    }
                    break;
                }
                await new Promise(resolve => setTimeout(resolve, 20));
              }
              return content;
            } catch (error) {
              console.error('Error converting blocks: ' + error.message);
              return '';
            }
          }

          // 모든 페이지 가져오기
          async function getAllPages() {
            let allPages = [];
            let hasMore = true;
            let nextCursor = undefined;

            while (hasMore) {
              try {
                const response = await notion.databases.query({
                  database_id: process.env.DATABASE_ID,
                  filter: {
                    property: 'Status',
                    select: { equals: 'Published' }
                  },
                  sorts: [{ property: 'Date', direction: 'descending' }],
                  start_cursor: nextCursor,
                  page_size: 100
                });

                allPages = allPages.concat(response.results);
                hasMore = response.has_more;
                nextCursor = response.next_cursor;
                console.log('Retrieved ' + response.results.length + ' pages (Total: ' + allPages.length + ')');

                if (hasMore) {
                  await new Promise(resolve => setTimeout(resolve, 50));
                }
              } catch (error) {
                console.error('Error fetching pages: ' + error.message);
                break;
              }
            }
            return allPages;
          }

          async function syncNotionDatabase() {
            try {
              console.log('Connecting to Notion...');
              const cache = loadCache();
              console.log('Loaded cache with ' + Object.keys(cache).length + ' entries');

              const allPages = await getAllPages();
              console.log('Found ' + allPages.length + ' published posts');

              if (!fs.existsSync('content/posts')) {
                fs.mkdirSync('content/posts', { recursive: true });
              }

              let processedCount = 0;
              let skippedCount = 0;
              const newCache = {};

              for (const page of allPages) {
                try {
                  const pageId = page.id;
                  const lastEditedTime = page.last_edited_time;
                  const title = page.properties['제목']?.title?.[0]?.plain_text || 'Untitled';
                  const slug = createSlug(title);
                  const postDir = 'content/posts/' + slug;
                  const postFile = postDir + '/index.md';

                  // 💡 핵심 수정: 캐시 확인 + 파일 존재 확인
                  if (cache[pageId] && 
                      cache[pageId].last_edited_time === lastEditedTime && 
                      fs.existsSync(postFile)) {
                    console.log('Skipped (cached + file exists): "' + title + '"');
                    newCache[pageId] = cache[pageId];
                    skippedCount++;
                    continue;
                  }

                  console.log('Processing: "' + title + '"');

                  const dateValue = page.properties['Date']?.date?.start || page.created_time;
                  const tags = page.properties['Tags']?.multi_select?.map(tag => tag.name) || [];
                  const themes = page.properties['Thems']?.multi_select?.map(theme => theme.name) || [];
                  const aiSummary = page.properties['AI 요약']?.rich_text?.[0]?.plain_text || '';

                  const blockContent = await convertBlocks(page.id);

                  let content = '---\\n';
                  content += 'title: ' + createSafeYamlString(title) + '\\n';
                  content += 'date: ' + formatDate(dateValue) + '\\n';
                  content += 'draft: false\\n';

                  if (tags.length > 0 || themes.length > 0) {
                    const allTags = [...tags, ...themes].map(tag => createSafeYamlString(tag));
                    content += 'tags: [' + allTags.join(', ') + ']\\n';
                  }

                  if (themes.length > 0) {
                    const categories = themes.map(theme => createSafeYamlString(theme));
                    content += 'categories: [' + categories.join(', ') + ']\\n';
                  }

                  if (aiSummary) {
                    const truncatedSummary = aiSummary.length > 50 ?
                      aiSummary.substring(0, 50) + '...' : aiSummary;
                    content += 'description: ' + createSafeYamlString(truncatedSummary) + '\\n';
                  }

                  content += '---\\n\\n';

                  if (blockContent.trim()) {
                    content += blockContent;
                  } else {
                    content += '# ' + title + '\\n\\n*이 글은 Notion에서 가져왔습니다.*\\n';
                  }

                  if (!fs.existsSync(postDir)) {
                    fs.mkdirSync(postDir, { recursive: true });
                  }

                  fs.writeFileSync(postFile, content, 'utf8');

                  newCache[pageId] = {
                    last_edited_time: lastEditedTime,
                    title: title,
                    slug: slug,
                    processed_at: new Date().toISOString()
                  };

                  console.log('Created/Updated: "' + title + '" → ' + slug);
                  processedCount++;
                  await new Promise(resolve => setTimeout(resolve, 50));

                } catch (err) {
                  console.error('Error processing page: ' + err.message);
                }
              }

              saveCache(newCache);

              console.log('\\n동기화 완료:');
              console.log('처리: ' + processedCount + '개');
              console.log('스킵: ' + skippedCount + '개');
              console.log('캐시 효율: ' + Math.round((skippedCount / allPages.length) * 100) + '%');

            } catch (error) {
              console.error('Notion API Error: ' + error.message);
              process.exit(1);
            }
          }

          syncNotionDatabase();
          EOF

          npm init -y
          npm install @notionhq/client
          NOTION_SECRET="${{ secrets.NOTION_SECRET }}" DATABASE_ID="${{ secrets.DATABASE_ID }}" node sync_notion.js

      # 캐시 파일을 다음 실행을 위해 커밋
      - name: Commit Cache
        run: |
          if [ -f notion_cache.json ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add notion_cache.json
            if git diff --staged --quiet; then
              echo "No cache changes to commit"
            else
              git commit -m "Update Notion cache [skip ci]" || echo "No changes to commit"
              git push || echo "No changes to push"
            fi
          fi

      - name: Check Sync Results
        run: |
          echo "📊 동기화 결과:"
          echo "=== 생성된 포스트 ==="
          find content/posts -name "*.md" -type f | wc -l
          echo "개의 포스트가 생성되었습니다."
          
          echo "=== 캐시 정보 ==="
          if [ -f notion_cache.json ]; then
            echo "캐시 파일 크기: $(wc -l < notion_cache.json) 라인"
            echo "캐시된 항목 수: $(jq 'length' notion_cache.json 2>/dev/null || echo 'jq not available')"
          fi
          
          echo "=== 포스트 목록 ==="
          find content/posts -name "index.md" -type f | head -5

      - name: Ensure Default Content
        run: |
          # 메인 페이지 (_index.md)
          mkdir -p content
          cat > content/_index.md << 'EOF'
          ---
          title: "삽질 저장소"
          ---
          
          개발자 Cybecho의 삽질과 학습을 기록하는 공간입니다.
          
          실패에서 배우고, 성공을 기록하며, 지식을 공유합니다.
          EOF
          
          # About 페이지
          if [ ! -f content/about.md ]; then
            cat > content/about.md << 'EOF'
          ---
          title: "소개"
          date: 2024-01-01T00:00:00+09:00
          draft: false
          ShowToc: false
          ShowBreadCrumbs: false
          ---
          
          # 안녕하세요, Cybecho입니다! 👋
          
          개발자로서의 삽질과 성장을 기록하는 공간입니다.
          
          ## 🚀 이 블로그는...
          
          - **Notion 연동**: 편리한 글 작성과 관리
          - **자동 배포**: GitHub Actions를 통한 자동화  
          - **스마트 캐싱**: 변경된 글만 업데이트하여 빠른 빌드
          - **반응형**: 모든 디바이스에서 완벽한 경험
          
          ## 📊 Notion 연동 상태
          
          - **데이터베이스**: 삽질 저장소
          - **자동 동기화**: 매일 새벽 2시 (KST)
          - **수동 동기화**: GitHub Actions에서 "Run workflow"
          - **캐싱 시스템**: 변경된 글만 처리하여 빠른 빌드
          
          ## 🛠️ 기술 스택
          
          - **정적 사이트 생성기**: Hugo
          - **테마**: Hugo Blog Awesome
          - **CMS**: Notion
          - **배포**: GitHub Pages
          - **CI/CD**: GitHub Actions + Smart Caching
          
          ## 📬 연락처
          
          - **GitHub**: [@Cybecho](https://github.com/Cybecho)
          
          ---
          *Notion API를 통해 Published 상태의 글들이 자동 동기화됩니다* ✨  
          *스마트 캐싱으로 변경된 글만 빠르게 업데이트됩니다* ⚡
          EOF
          fi

      # Hugo 빌드
      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
        run: |
          echo "🏗️ Building Hugo site..."
          hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4