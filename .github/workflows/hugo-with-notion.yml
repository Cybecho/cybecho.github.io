name: Hugo with Direct Notion API

on:
  push:
    branches: ["main"]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      # üöÄ Ïä§ÎßàÌä∏ Ï∫êÏã±Ïù¥ Ï†ÅÏö©Îêú Notion ÎèôÍ∏∞Ìôî Ïä§ÌÅ¨Î¶ΩÌä∏
      - name: Smart Cached Notion Sync Script
        run: |
          echo "üöÄ Creating smart cached Notion sync script..."
          cat > sync_notion.js << 'EOF'
          const { Client } = require('@notionhq/client');
          const fs = require('fs');
          const path = require('path');

          const notion = new Client({
            auth: process.env.NOTION_SECRET,
          });

          // Ï∫êÏãú ÌååÏùº Í≤ΩÎ°ú
          const CACHE_FILE = 'notion_cache.json';

          // Ï∫êÏãú Î°úÎìú Ìï®Ïàò
          function loadCache() {
            try {
              if (fs.existsSync(CACHE_FILE)) {
                const cacheData = fs.readFileSync(CACHE_FILE, 'utf8');
                return JSON.parse(cacheData);
              }
            } catch (error) {
              console.log('‚ö†Ô∏è Cache load error:', error.message);
            }
            return {};
          }

          // Ï∫êÏãú Ï†ÄÏû• Ìï®Ïàò
          function saveCache(cache) {
            try {
              fs.writeFileSync(CACHE_FILE, JSON.stringify(cache, null, 2));
              console.log('üíæ Cache saved successfully');
            } catch (error) {
              console.error('‚ùå Cache save error:', error.message);
            }
          }

          // YAML ÏïàÏ†Ñ Î¨∏ÏûêÏó¥ ÏÉùÏÑ± Ìï®Ïàò
          function createSafeYamlString(str) {
            if (!str) return '""';
            const escaped = str
              .replace(/\\/g, '\\\\')
              .replace(/"/g, '\\"')
              .replace(/\n/g, '\\n')
              .replace(/\r/g, '\\r')
              .replace(/\t/g, '\\t');
            return `"${escaped}"`;
          }

          // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ Ìï®Ïàò
          function formatDate(dateString) {
            if (!dateString) return new Date().toISOString();
            const date = new Date(dateString);
            return date.toISOString();
          }

          // ÏïàÏ†ÑÌïú Ïä¨Îü¨Í∑∏ ÏÉùÏÑ± Ìï®Ïàò
          function createSlug(title) {
            return title
              .toLowerCase()
              .replace(/[^a-z0-9Í∞Ä-Ìû£\s]/g, '')
              .replace(/\s+/g, '-')
              .replace(/-+/g, '-')
              .replace(/^-|-$/g, '')
              .substring(0, 100);
          }

          // Î¶¨Ïπò ÌÖçÏä§Ìä∏ Î≥ÄÌôò Ìï®Ïàò
          function convertRichText(richTextArray) {
            if (!richTextArray || !Array.isArray(richTextArray)) return '';
            return richTextArray.map(textObj => {
              let text = textObj.plain_text || '';
              if (textObj.annotations?.bold) text = `**${text}**`;
              if (textObj.annotations?.italic) text = `*${text}*`;
              if (textObj.annotations?.code) text = '`' + text + '`';
              if (textObj.annotations?.strikethrough) text = `~~${text}~~`;
              if (textObj.annotations?.underline) text = `<u>${text}</u>`;
              if (textObj.href) text = `[${text}](${textObj.href})`;
              return text;
            }).join('');
          }

          // Í∞ïÌôîÎêú Î∏îÎ°ù Î≥ÄÌôò Ìï®Ïàò
          async function convertBlocks(pageId, depth = 0) {
            try {
              const blocks = await notion.blocks.children.list({
                block_id: pageId,
                page_size: 100
              });

              let content = '';
              const indent = '  '.repeat(depth);

              for (const block of blocks.results) {
                switch (block.type) {
                  case 'paragraph':
                    if (block.paragraph?.rich_text?.length > 0) {
                      content += indent + convertRichText(block.paragraph.rich_text) + '\n\n';
                    } else if (block.paragraph?.rich_text?.length === 0) {
                      content += '\n';
                    }
                    break;

                  case 'heading_1':
                    if (block.heading_1?.rich_text?.length > 0) {
                      content += indent + '# ' + convertRichText(block.heading_1.rich_text) + '\n\n';
                    }
                    break;

                  case 'heading_2':
                    if (block.heading_2?.rich_text?.length > 0) {
                      content += indent + '## ' + convertRichText(block.heading_2.rich_text) + '\n\n';
                    }
                    break;

                  case 'heading_3':
                    if (block.heading_3?.rich_text?.length > 0) {
                      content += indent + '### ' + convertRichText(block.heading_3.rich_text) + '\n\n';
                    }
                    break;

                  case 'bulleted_list_item':
                    if (block.bulleted_list_item?.rich_text?.length > 0) {
                      content += indent + '- ' + convertRichText(block.bulleted_list_item.rich_text) + '\n';
                      if (block.has_children) {
                        const childContent = await convertBlocks(block.id, depth + 1);
                        content += childContent;
                      }
                    }
                    break;

                  case 'numbered_list_item':
                    if (block.numbered_list_item?.rich_text?.length > 0) {
                      content += indent + '1. ' + convertRichText(block.numbered_list_item.rich_text) + '\n';
                      if (block.has_children) {
                        const childContent = await convertBlocks(block.id, depth + 1);
                        content += childContent;
                      }
                    }
                    break;

                  case 'toggle':
                    if (block.toggle?.rich_text?.length > 0) {
                      const toggleTitle = convertRichText(block.toggle.rich_text);
                      content += indent + '<details>\n' + indent + '<summary>' + toggleTitle + '</summary>\n\n';
                      if (block.has_children) {
                        const childContent = await convertBlocks(block.id, depth);
                        content += childContent;
                      }
                      content += indent + '</details>\n\n';
                    }
                    break;

                  case 'code':
                    if (block.code?.rich_text?.length > 0) {
                      const language = block.code.language || '';
                      const codeText = convertRichText(block.code.rich_text);
                      content += indent + '```' + language + '\n' + codeText + '\n```\n\n';
                    }
                    break;

                  case 'quote':
                    if (block.quote?.rich_text?.length > 0) {
                      content += indent + '> ' + convertRichText(block.quote.rich_text) + '\n\n';
                    }
                    break;

                  case 'callout':
                    if (block.callout?.rich_text?.length > 0) {
                      const icon = block.callout.icon?.emoji || 'üí°';
                      const calloutText = convertRichText(block.callout.rich_text);
                      content += indent + '> ' + icon + ' **' + calloutText + '**\n\n';
                    }
                    break;

                  case 'divider':
                    content += indent + '---\n\n';
                    break;

                  case 'image':
                    if (block.image?.file?.url) {
                      const caption = block.image.caption?.length > 0 ? 
                        convertRichText(block.image.caption) : 'Image';
                      content += indent + '![' + caption + '](' + block.image.file.url + ')\n\n';
                    } else if (block.image?.external?.url) {
                      const caption = block.image.caption?.length > 0 ? 
                        convertRichText(block.image.caption) : 'Image';
                      content += indent + '![' + caption + '](' + block.image.external.url + ')\n\n';
                    }
                    break;

                  case 'video':
                    if (block.video?.external?.url) {
                      const url = block.video.external.url;
                      if (url.includes('youtube.com') || url.includes('youtu.be')) {
                        content += indent + 'üé• [YouTube ÎèôÏòÅÏÉÅ Î≥¥Í∏∞](' + url + ')\n\n';
                      } else {
                        content += indent + 'üé• [ÎèôÏòÅÏÉÅ Î≥¥Í∏∞](' + url + ')\n\n';
                      }
                    }
                    break;

                  case 'bookmark':
                  case 'link_preview':
                    const bookmarkUrl = block.bookmark?.url || block.link_preview?.url;
                    if (bookmarkUrl) {
                      const title = block.bookmark?.caption?.length > 0 ? 
                        convertRichText(block.bookmark.caption) : bookmarkUrl;
                      content += indent + 'üîó [' + title + '](' + bookmarkUrl + ')\n\n';
                    }
                    break;

                  case 'embed':
                    if (block.embed?.url) {
                      content += indent + 'üîó [ÏûÑÎ≤†Îìú ÏΩòÌÖêÏ∏†](' + block.embed.url + ')\n\n';
                    }
                    break;

                  case 'file':
                    if (block.file?.file?.url) {
                      const fileName = block.file.name || 'File';
                      content += indent + 'üìé [' + fileName + '](' + block.file.file.url + ')\n\n';
                    }
                    break;

                  case 'pdf':
                    if (block.pdf?.file?.url) {
                      content += indent + 'üìÑ [PDF Î¨∏ÏÑú](' + block.pdf.file.url + ')\n\n';
                    }
                    break;

                  case 'table':
                    if (block.has_children) {
                      content += indent + '\n| | |\n|---|---|\n';
                      const tableContent = await convertBlocks(block.id, depth);
                      content += tableContent + '\n';
                    }
                    break;

                  case 'table_row':
                    if (block.table_row?.cells?.length > 0) {
                      const cells = block.table_row.cells.map(cell => 
                        convertRichText(cell) || ' '
                      );
                      content += indent + '| ' + cells.join(' | ') + ' |\n';
                    }
                    break;

                  case 'to_do':
                    if (block.to_do?.rich_text?.length > 0) {
                      const checked = block.to_do.checked ? '[x]' : '[ ]';
                      content += indent + '- ' + checked + ' ' + convertRichText(block.to_do.rich_text) + '\n';
                    }
                    break;

                  case 'column_list':
                    if (block.has_children) {
                      content += indent + '<div class="columns">\n';
                      const columnContent = await convertBlocks(block.id, depth);
                      content += columnContent;
                      content += indent + '</div>\n\n';
                    }
                    break;

                  case 'column':
                    if (block.has_children) {
                      content += indent + '<div class="column">\n';
                      const columnContent = await convertBlocks(block.id, depth);
                      content += columnContent;
                      content += indent + '</div>\n';
                    }
                    break;
                }

                await new Promise(resolve => setTimeout(resolve, 20));
              }

              return content;
            } catch (error) {
              console.error('‚ùå Error converting blocks: ' + error.message);
              return '';
            }
          }

          // Î™®Îì† ÌéòÏù¥ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞ (ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ï≤òÎ¶¨)
          async function getAllPages() {
            let allPages = [];
            let hasMore = true;
            let nextCursor = undefined;

            while (hasMore) {
              try {
                const response = await notion.databases.query({
                  database_id: process.env.DATABASE_ID,
                  filter: {
                    property: 'Status',
                    select: {
                      equals: 'Published'
                    }
                  },
                  sorts: [
                    {
                      property: 'Date',
                      direction: 'descending'
                    }
                  ],
                  start_cursor: nextCursor,
                  page_size: 100
                });

                allPages = allPages.concat(response.results);
                hasMore = response.has_more;
                nextCursor = response.next_cursor;

                console.log('üìÑ Retrieved ' + response.results.length + ' pages (Total: ' + allPages.length + ')');

                if (hasMore) {
                  await new Promise(resolve => setTimeout(resolve, 50));
                }

              } catch (error) {
                console.error('‚ùå Error fetching pages: ' + error.message);
                break;
              }
            }

            return allPages;
          }

          async function syncNotionDatabase() {
            try {
              console.log('üîÑ Connecting to Notion...');
              
              // Ï∫êÏãú Î°úÎìú
              const cache = loadCache();
              console.log('üìã Loaded cache with ' + Object.keys(cache).length + ' entries');

              const allPages = await getAllPages();
              console.log('üìä Found ' + allPages.length + ' published posts');

              if (!fs.existsSync('content/posts')) {
                fs.mkdirSync('content/posts', { recursive: true });
              }

              let successCount = 0;
              let errorCount = 0;
              let skippedCount = 0;
              let updatedCount = 0;
              const newCache = {};

              for (const page of allPages) {
                try {
                  const pageId = page.id;
                  const lastEditedTime = page.last_edited_time;
                  const title = page.properties['Ï†úÎ™©']?.title?.[0]?.plain_text || 'Untitled';
                  const slug = createSlug(title);
                  
                  // Ï∫êÏãú ÌôïÏù∏ - Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏóÜÏúºÎ©¥ Ïä§ÌÇµ
                  if (cache[pageId] && cache[pageId].last_edited_time === lastEditedTime) {
                    console.log('‚è© Skipped (no changes): "' + title + '"');
                    newCache[pageId] = cache[pageId];
                    skippedCount++;
                    continue;
                  }

                  console.log('üìù Processing: "' + title + '" (last edited: ' + lastEditedTime + ')');

                  const dateValue = page.properties['Date']?.date?.start || page.created_time;
                  const tags = page.properties['Tags']?.multi_select?.map(tag => tag.name) || [];
                  const themes = page.properties['Thems']?.multi_select?.map(theme => theme.name) || [];
                  const aiSummary = page.properties['AI ÏöîÏïΩ']?.rich_text?.[0]?.plain_text || '';

                  const blockContent = await convertBlocks(page.id);

                  let content = '---\n';
                  content += 'title: ' + createSafeYamlString(title) + '\n';
                  content += 'date: ' + formatDate(dateValue) + '\n';
                  content += 'draft: false\n';

                  if (tags.length > 0 || themes.length > 0) {
                    const allTags = [...tags, ...themes].map(tag => createSafeYamlString(tag));
                    content += 'tags: [' + allTags.join(', ') + ']\n';
                  }

                  if (themes.length > 0) {
                    const categories = themes.map(theme => createSafeYamlString(theme));
                    content += 'categories: [' + categories.join(', ') + ']\n';
                  }

                  // AI ÏöîÏïΩ 50Ïûê Ï†úÌïú Ï≤òÎ¶¨
                  if (aiSummary) {
                    const truncatedSummary = aiSummary.length > 50 ? 
                      aiSummary.substring(0, 50) + '...' : aiSummary;
                    content += 'description: ' + createSafeYamlString(truncatedSummary) + '\n';
                  }

                  content += 'notion_id: ' + createSafeYamlString(page.id) + '\n';
                  content += 'notion_url: ' + createSafeYamlString(page.url) + '\n';
                  content += '---\n\n';

                  if (blockContent.trim()) {
                    content += blockContent;
                  } else {
                    content += '# ' + title + '\n\n*Ïù¥ Í∏ÄÏùÄ NotionÏóêÏÑú Í∞ÄÏ†∏ÏôîÏäµÎãàÎã§.*\n\n';
                    content += '[ÏõêÎ≥∏ Î≥¥Í∏∞](' + page.url + ')\n';
                  }

                  const postDir = 'content/posts/' + slug;
                  if (!fs.existsSync(postDir)) {
                    fs.mkdirSync(postDir, { recursive: true });
                  }

                  fs.writeFileSync(postDir + '/index.md', content, 'utf8');

                  // Ï∫êÏãúÏóê Ï†ïÎ≥¥ Ï†ÄÏû•
                  newCache[pageId] = {
                    last_edited_time: lastEditedTime,
                    title: title,
                    slug: slug,
                    processed_at: new Date().toISOString()
                  };

                  if (cache[pageId]) {
                    console.log('üîÑ Updated: "' + title + '" ‚Üí ' + slug);
                    updatedCount++;
                  } else {
                    console.log('‚úÖ Created: "' + title + '" ‚Üí ' + slug);
                  }
                  
                  successCount++;

                  await new Promise(resolve => setTimeout(resolve, 50));

                } catch (err) {
                  console.error('‚ùå Error processing page: ' + err.message);
                  errorCount++;
                }
              }

              // ÏÉà Ï∫êÏãú Ï†ÄÏû•
              saveCache(newCache);

              console.log('\nüìä ÎèôÍ∏∞Ìôî ÏôÑÎ£å:');
              console.log('‚úÖ ÏÑ±Í≥µ: ' + successCount + 'Í∞ú');
              console.log('üîÑ ÏóÖÎç∞Ïù¥Ìä∏: ' + updatedCount + 'Í∞ú');
              console.log('‚è© Ïä§ÌÇµ: ' + skippedCount + 'Í∞ú');
              console.log('‚ùå Ïã§Ìå®: ' + errorCount + 'Í∞ú');
              console.log('‚ö° Ï∫êÏãú Ìö®Ïú®: ' + Math.round((skippedCount / allPages.length) * 100) + '%');

            } catch (error) {
              console.error('‚ùå Notion API Error: ' + error.message);
              process.exit(0);
            }
          }

          syncNotionDatabase();
          EOF

          npm init -y
          npm install @notionhq/client

          NOTION_SECRET="${{ secrets.NOTION_SECRET }}" DATABASE_ID="${{ secrets.DATABASE_ID }}" node sync_notion.js

      # Ï∫êÏãú ÌååÏùºÏùÑ Îã§Ïùå Ïã§ÌñâÏùÑ ÏúÑÌï¥ Ïª§Î∞ã
      - name: Commit Cache
        run: |
          if [ -f notion_cache.json ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add notion_cache.json
            if git diff --staged --quiet; then
              echo "No cache changes to commit"
            else
              git commit -m "Update Notion cache [skip ci]" || echo "No changes to commit"
              git push || echo "No changes to push"
            fi
          fi

      - name: Check Sync Results
        run: |
          echo "üìä ÎèôÍ∏∞Ìôî Í≤∞Í≥º:"
          echo "=== ÏÉùÏÑ±Îêú Ìè¨Ïä§Ìä∏ ==="
          find content/posts -name "*.md" -type f | wc -l
          echo "Í∞úÏùò Ìè¨Ïä§Ìä∏Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§."
          
          echo "=== Ï∫êÏãú Ï†ïÎ≥¥ ==="
          if [ -f notion_cache.json ]; then
            echo "Ï∫êÏãú ÌååÏùº ÌÅ¨Í∏∞: $(wc -l < notion_cache.json) ÎùºÏù∏"
            echo "Ï∫êÏãúÎêú Ìï≠Î™© Ïàò: $(jq 'length' notion_cache.json 2>/dev/null || echo 'jq not available')"
          fi
          
          echo "=== Ìè¨Ïä§Ìä∏ Î™©Î°ù ==="
          find content/posts -name "index.md" -type f | head -5

      - name: Ensure Default Content
        run: |
          # Î©îÏù∏ ÌéòÏù¥ÏßÄ (_index.md)
          mkdir -p content
          cat > content/_index.md << 'EOF'
          ---
          title: "ÏÇΩÏßà Ï†ÄÏû•ÏÜå"
          ---
          
          Í∞úÎ∞úÏûê CybechoÏùò ÏÇΩÏßàÍ≥º ÌïôÏäµÏùÑ Í∏∞Î°ùÌïòÎäî Í≥µÍ∞ÑÏûÖÎãàÎã§.
          
          Ïã§Ìå®ÏóêÏÑú Î∞∞Ïö∞Í≥†, ÏÑ±Í≥µÏùÑ Í∏∞Î°ùÌïòÎ©∞, ÏßÄÏãùÏùÑ Í≥µÏú†Ìï©ÎãàÎã§.
          EOF
          
          # About ÌéòÏù¥ÏßÄ
          if [ ! -f content/about.md ]; then
            cat > content/about.md << 'EOF'
          ---
          title: "ÏÜåÍ∞ú"
          date: 2024-01-01T00:00:00+09:00
          draft: false
          ShowToc: false
          ShowBreadCrumbs: false
          ---
          
          # ÏïàÎÖïÌïòÏÑ∏Ïöî, CybechoÏûÖÎãàÎã§! üëã
          
          Í∞úÎ∞úÏûêÎ°úÏÑúÏùò ÏÇΩÏßàÍ≥º ÏÑ±Ïû•ÏùÑ Í∏∞Î°ùÌïòÎäî Í≥µÍ∞ÑÏûÖÎãàÎã§.
          
          ## üöÄ Ïù¥ Î∏îÎ°úÍ∑∏Îäî...
          
          - **Notion Ïó∞Îèô**: Ìé∏Î¶¨Ìïú Í∏Ä ÏûëÏÑ±Í≥º Í¥ÄÎ¶¨
          - **ÏûêÎèô Î∞∞Ìè¨**: GitHub ActionsÎ•º ÌÜµÌïú ÏûêÎèôÌôî  
          - **Ïä§ÎßàÌä∏ Ï∫êÏã±**: Î≥ÄÍ≤ΩÎêú Í∏ÄÎßå ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏó¨ Îπ†Î•∏ ÎπåÎìú
          - **Î∞òÏùëÌòï**: Î™®Îì† ÎîîÎ∞îÏù¥Ïä§ÏóêÏÑú ÏôÑÎ≤ΩÌïú Í≤ΩÌóò
          
          ## üìä Notion Ïó∞Îèô ÏÉÅÌÉú
          
          - **Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§**: ÏÇΩÏßà Ï†ÄÏû•ÏÜå
          - **ÏûêÎèô ÎèôÍ∏∞Ìôî**: Îß§Ïùº ÏÉàÎ≤Ω 2Ïãú (KST)
          - **ÏàòÎèô ÎèôÍ∏∞Ìôî**: GitHub ActionsÏóêÏÑú "Run workflow"
          - **Ï∫êÏã± ÏãúÏä§ÌÖú**: Î≥ÄÍ≤ΩÎêú Í∏ÄÎßå Ï≤òÎ¶¨ÌïòÏó¨ Îπ†Î•∏ ÎπåÎìú
          
          ## üõ†Ô∏è Í∏∞Ïà† Ïä§ÌÉù
          
          - **Ï†ïÏ†Å ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±Í∏∞**: Hugo
          - **ÌÖåÎßà**: Hugo Blog Awesome
          - **CMS**: Notion
          - **Î∞∞Ìè¨**: GitHub Pages
          - **CI/CD**: GitHub Actions + Smart Caching
          
          ## üì¨ Ïó∞ÎùΩÏ≤ò
          
          - **GitHub**: [@Cybecho](https://github.com/Cybecho)
          
          ---
          *Notion APIÎ•º ÌÜµÌï¥ Published ÏÉÅÌÉúÏùò Í∏ÄÎì§Ïù¥ ÏûêÎèô ÎèôÍ∏∞ÌôîÎê©ÎãàÎã§* ‚ú®  
          *Ïä§ÎßàÌä∏ Ï∫êÏã±ÏúºÎ°ú Î≥ÄÍ≤ΩÎêú Í∏ÄÎßå Îπ†Î•¥Í≤å ÏóÖÎç∞Ïù¥Ìä∏Îê©ÎãàÎã§* ‚ö°
          EOF
          fi

      # Hugo ÎπåÎìú
      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
        run: |
          echo "üèóÔ∏è Building Hugo site..."
          hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4