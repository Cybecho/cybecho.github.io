name: Simple Hugo Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      # 🔍 디버깅: 파일 구조 확인
      - name: Debug - Check files
        run: |
          echo "=== Current directory structure ==="
          ls -la
          echo "=== Hugo config file ==="
          if [ -f hugo.toml ]; then
            cat hugo.toml
          else
            echo "hugo.toml not found!"
          fi
          echo "=== Content directory ==="
          if [ -d content ]; then
            ls -la content/
          else
            echo "content directory not found, creating..."
            mkdir -p content/posts
          fi
          echo "=== Themes directory ==="
          if [ -d themes ]; then
            ls -la themes/
          else
            echo "themes directory not found!"
          fi

      # Node.js 설치
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # 🔧 수정: 올바른 Hugo 액션 이름
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      # 🔍 Hugo 설정 검증
      - name: Validate Hugo Config
        run: |
          echo "=== Hugo version ==="
          hugo version
          echo "=== Hugo config check ==="
          if [ -f hugo.toml ]; then
            hugo config
          else
            echo "No hugo.toml found, creating minimal config..."
            cat > hugo.toml << EOF
baseURL = 'https://cybecho.github.io/'
languageCode = 'ko-kr'
title = '삽질 저장소 - Cybecho Blog'
theme = 'lightbi-hugo'

[params]
  author = "Cybecho"
  homeTitle = "삽질 저장소"
  homeSubtitle = "실패에서 배우고, 성공을 기록하다"
EOF
          fi

      # Notion JAM CLI 설치 및 실행
      - name: Install notion-jam
        run: npm install -g notion-jam

      - name: Sync Notion Content
        run: |
          echo "Syncing Notion content..."
          notion-jam \
            --notion-token "${{ secrets.NOTION_SECRET }}" \
            --root-page "${{ secrets.DATABASE_ID }}" \
            --output-dir "content/posts" \
            --download-images \
            --image-dir "static/images"
        continue-on-error: true

      # 🔍 콘텐츠 확인
      - name: Debug - Check content after sync
        run: |
          echo "=== Content after sync ==="
          find content -name "*.md" | head -10 || echo "No markdown files found"
          echo "=== Sample content file ==="
          if find content -name "*.md" | head -1 | xargs test -f; then
            find content -name "*.md" | head -1 | xargs head -20
          else
            echo "No content files to show"
          fi
          echo "=== Static images ==="
          if [ -d static/images ]; then
            ls -la static/images/ | head -10
          else
            echo "No static images directory"
          fi

      # 기본 콘텐츠 생성 (Notion 동기화 실패 시 백업)
      - name: Create default content if needed
        run: |
          if [ ! -d "content/posts" ] || [ -z "$(ls -A content/posts)" ]; then
            echo "No content found, creating sample post..."
            mkdir -p content/posts/welcome
            cat > content/posts/welcome/index.md << 'EOF'
---
title: "환영합니다!"
date: 2024-01-01T00:00:00+09:00
draft: false
tags: ["환영", "첫글"]
---

# 삽질 저장소에 오신 것을 환영합니다! 🎉

이곳은 Cybecho의 개발 여정과 삽질 기록을 담는 공간입니다.

## 앞으로 기대하세요
- 🔧 개발 삽질기
- 📚 학습 노트  
- 💡 문제 해결 과정
- 🚀 새로운 기술 탐험

Notion에서 작성한 글들이 자동으로 여기에 동기화됩니다!
EOF
          fi

      # Hugo 빌드
      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
        run: |
          echo "Building Hugo site..."
          hugo --minify --verbose

      # 빌드 결과 확인
      - name: Debug - Check build output
        run: |
          echo "=== Build output ==="
          ls -la public/
          echo "=== Sample generated files ==="
          find public -name "*.html" | head -5 | xargs ls -la

      # GitHub Pages 배포
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy-to-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
